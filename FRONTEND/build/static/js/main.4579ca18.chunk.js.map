{"version":3,"sources":["store/authReducer.js","shared/components/UI/LoadingSpinner.js","shared/components/navigation/Backdrop.js","shared/components/navigation/MainHeader.js","shared/components/navigation/NavLinks.js","shared/components/navigation/SideDrawer.js","shared/components/navigation/MainNavigation.js","App.js","store/auth-store.js","index.js"],"names":["authSlice","createSlice","name","initialState","token","isLogged","userId","reducers","login","state","action","payload","localStorage","setItem","JSON","stringify","logout","removeItem","authActions","actions","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","MainHeader","children","NavLinks","isLogin","useSelector","auth","dispatch","useDispatch","to","SideDrawer","drawer","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","reactDom","MainNavigation","useState","isDrawer","setIsDrawer","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","UserAuth","App","routes","isLog","useEffect","storedData","parse","getItem","path","element","replace","fallback","store","configureStore","reducer","render"],"mappings":"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","file":"static/js/main.4579ca18.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  token: null,\n  isLogged: false,\n  userId: null,\n};\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    login(state, action) {\n      state.token = action.payload.token;\n      state.userId = action.payload.userId;\n      state.isLogged = true;\n      localStorage.setItem(\n        \"userData\",\n        JSON.stringify({\n          userId: state.userId,\n          token: state.token,\n        })\n      );\n    },\n    logout(state) {\n      state.token = null;\n      state.userId = null;\n      state.isLogged = false;\n      localStorage.removeItem(\"userData\");\n    },\n  },\n});\nexport const authActions = authSlice.actions;\n\nexport default authSlice.reducer;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import \"./MainHeader.css\";\nimport React from \"react\";\n\nconst MainHeader = (props) => {\n  return <header className=\"main-header\">{props.children}</header>;\n};\nexport default MainHeader;\n","import React from \"react\";\nimport \"./NavLinks.css\";\nimport { Navigate, NavLink } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authActions } from \"../../../store/authReducer\";\n\nconst NavLinks = () => {\n  const isLogin = useSelector((state) => state.auth.isLogged);\n  const dispatch = useDispatch();\n  const userId = useSelector((state) => state.auth.userId);\n\n  const logoutHandler = () => {\n    dispatch(authActions.logout());\n    return <Navigate to=\"/\" />;\n  };\n\n  return (\n    <ul className=\"nav-links\">\n      <li>\n        <NavLink to=\"/\"> ALL USERS</NavLink>\n      </li>\n      {isLogin && (\n        <li>\n          <NavLink to={`/${userId}/places`}> MY PLACES</NavLink>\n        </li>\n      )}\n      {isLogin && (\n        <li>\n          <NavLink to=\"/places/new\"> ADD PLACE</NavLink>\n        </li>\n      )}\n      {!isLogin && (\n        <li>\n          <NavLink to=\"/auth\"> AUTHENTICATE</NavLink>\n        </li>\n      )}\n      {isLogin && (\n        <li>\n          <button onClick={logoutHandler}>LOGOUT</button>)\n        </li>\n      )}\n    </ul>\n  );\n};\nexport default NavLinks;\n","import React from \"react\";\nimport reactDom from \"react-dom\";\nimport \"./SideDrawer.css\";\nimport { CSSTransition } from \"react-transition-group\";\n\nconst SideDrawer = (props) => {\n  const drawer = (\n    <CSSTransition\n      in={props.show}\n      timeout={1000}\n      classNames=\"slide-in-left\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <aside className=\"side-drawer\">{props.children}</aside>\n    </CSSTransition>\n  );\n  return reactDom.createPortal(drawer, document.getElementById(\"drawer-hook\"));\n};\nexport default SideDrawer;\n","import \"./MainNavigation.css\";\nimport MainHeader from \"./MainHeader\";\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NavLinks from \"./NavLinks\";\nimport SideDrawer from \"./SideDrawer\";\nimport { useState } from \"react\";\nimport Backdrop from \"./Backdrop\";\n\nconst MainNavigation = (props) => {\n  const [isDrawer, setIsDrawer] = useState(false);\n\n  const openDrawerHandler = () => {\n    setIsDrawer(true);\n  };\n\n  const closeDrawerHandler = () => {\n    setIsDrawer(false);\n  };\n\n  return (\n    <Fragment>\n      {isDrawer && <Backdrop onClick={closeDrawerHandler} />}\n      <SideDrawer show={isDrawer}>\n        <nav className=\"main-navigation__drawer-nav\">\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n      <MainHeader>\n        <button\n          className=\"main-navigation__menu-btn\"\n          onClick={openDrawerHandler}\n        >\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">YourPlaces</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </Fragment>\n  );\n};\nexport default MainNavigation;\n","import React, { Suspense, Fragment, useEffect } from \"react\";\nimport { Routes, Route, BrowserRouter, Navigate } from \"react-router-dom\";\nimport MainNavigation from \"./shared/components/navigation/MainNavigation\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { authActions } from \"./store/authReducer\";\nimport LoadingSpinner from \"./shared/components/UI/LoadingSpinner\";\n\nconst Users = React.lazy(() => import(\"./user/pages/Users\"));\nconst NewPlace = React.lazy(() => import(\"./places/pages/NewPlace\"));\nconst UserPlaces = React.lazy(() => import(\"./places/pages/UserPlaces\"));\nconst UpdatePlace = React.lazy(() => import(\"./places/pages/UpdatePlace\"));\nconst UserAuth = React.lazy(() => import(\"./user/pages/UserAuth\"));\n\nconst App = () => {\n  const isLog = useSelector((state) => state.auth.isLogged);\n  const dispatch = useDispatch();\n  let routes;\n\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (storedData) {\n      dispatch(\n        authActions.login({\n          userId: storedData.userId,\n          token: storedData.token,\n        })\n      );\n    }\n  }, []);\n\n  if (isLog) {\n    routes = (\n      <Fragment>\n        <Route path=\"/\" element={<Users />} />\n        <Route path=\"/:userId/places\" element={<UserPlaces />} />\n        <Route path=\"/places/new\" element={<NewPlace />} />\n        <Route path=\"/:userId/places/:placeId\" element={<UpdatePlace />} />\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Fragment>\n    );\n  } else {\n    routes = (\n      <Fragment>\n        <Route path=\"/\" element={<Users />} />\n        <Route path=\"/:userId/places\" element={<UserPlaces />} />\n        <Route path=\"/auth\" element={<UserAuth />} />{\" \"}\n        <Route path=\"*\" element={<Navigate to=\"/auth\" replace />} />\n      </Fragment>\n    );\n  }\n  return (\n    <BrowserRouter>\n      <MainNavigation />\n      <main>\n        <Suspense\n          fallback={\n            <div className=\"center\">\n              <LoadingSpinner />\n            </div>\n          }\n        >\n          <Routes>{routes}</Routes>\n        </Suspense>\n      </main>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport authSlice from \"./authReducer\";\n\nexport const store = configureStore({\n  reducer: { auth: authSlice },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./store/auth-store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}